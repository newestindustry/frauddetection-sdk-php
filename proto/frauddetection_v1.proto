syntax = "proto3";

package frauddetection_v1;

service FraudDetectionService {
    // CheckOrder runs the order through a series of validations and checks and returns a Fraud Probability Score between
    // 0 and 1, where 0 is least probable to be fraud and 1 is most probable to be fraud.
    rpc CheckOrder (CheckOrderRequest) returns (CheckOrderResponse) {}
}

message CheckOrderRequest {
    // Request metadata
    Meta meta = 1;
    // Order to check
    Order order = 2;
}

message CheckOrderResponse {
    // Response metadata
    Meta meta = 1;
    // Fraud Probability Score will be between 0 and 1, where 0 is most probable to be fraud and 1 is least probable.
    double score = 2;
    // Success will hold the success status of the checks. This will tell if a critical validation error was encountered.
    // (e.g. A check does an API call and the API is unreachable. In this case we could not complete validation so the
    // score will not be representable).
    bool success = 3;
    // Errors will contain a collection of errors thrown during calculation (e.g. Data validation)
    repeated CheckError errors = 4;
}

// CheckError is the error struct used to return all errors thrown during calculation so this may contain
// specific issues about backend connections
message CheckError {
    // Type holds the check type
    string type = 1;
    // Errors gives the errors encountered (in english)
    repeated string errors = 2;
}

message Order {
    // Time order is placed
    Timestamp time = 1;
    // Order ID
    string id = 2;
    // Merchant handling the order
    Merchant merchant = 3;
    // Customer
    Customer customer = 4;
    // Payment details and method
    Payment payment = 5;
    // Total order price
    int64 amount = 6;
    // How much discount is given on this order
    int64 discount = 7;
    // Shipment details
    Shipment shipment = 8;
    // Orderlines (products bought)
    repeated OrderLine orderline = 9;
}

message Payment {
    // Amount payed
    int64 amount = 1;
    // Enumerated payment method (cc, ideal, other)
    string method = 2;
    // Is payment provided upfront (false) or after the order is received (true)
    bool postpay = 3;
    // Currency symbol
    string currency = 4;
}

message Shipment {
    // Shipping address
    Address address = 1;
    // Carrier identifier
    string carrier = 2;
}

message OrderLine {
    // Product definition
    Product product = 1;
    // Amount of Product ordered
    int32 amount = 2;
}

message Product {
    // Product ID
    string id = 1;
    // Product code
    string code = 2;
    // Product name
    string name = 3;
    // Product unit price
    int64 price = 4;
}

message Address {
    // Post/zipcode (eg. in NLD format is p6: 1234AB)
    string postalcode = 1;
    // Dutch number splitting is used, so number is the first part and numeric (no leading zeroes possible)
    int32 number = 2;
    // Number addition is a string concatenation to number, case sensitive
    string number_addition = 3;
    // Number addition is a string concatenation to number after number_addition, case sensitive, usually joined with -
    string number_letter = 4;
    // Streeet name
    string street = 5;
    // City name
    string city = 6;
    // Country code (ISO 3166-1 alpha-3, eg. NLD)
    string country = 7;
}

message Merchant {
    // Merchant ID
    string id = 1;
    // Merchant name
    string name = 2;
    // Chamber of Commerce ID (eg. in NLD this is the KVK Nummer)
    string coc_id = 3;
    // Merchant address
    Address address = 4;
    // Merchant email address
    string email = 5;
    // Merchant phone number (using E.164)
    string phone = 6;
    // Merchant URL (website)
    string url = 7;
}

message Customer {
    // Customer ID
    string id = 1;
    // Customer entity (either business or consumer)"
    string entity = 2;
    // Name of customer
    string name = 3;
    // Chamber of Commerce ID (eg. in NLD this is the KVK Nummer)
    string coc_id = 4;
    // Customer address
    Address address = 5;
    // Customer phone number (using E.164)
    string phone = 6;
    // Customer email address
    string email = 7;
}

message Meta {
    // Trace id for audit trails. Autogenerated by this service. If a trace is given in the request it will be appended
    // to the one generated by this service for tracking in the implementation
    string trace_id = 1;
}

message Timestamp {

    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    int64 seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    int32 nanos = 2;
}